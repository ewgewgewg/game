{"version":3,"sources":["home/index.js","roots/utils/getRandom.js","roots/utils/expand.js","roots/state.js","roots/space/index.js","roots/row/index.js","roots/board/index.js","roots/header/index.js","returnHome/index.js","App.js","reportWebVitals.js","index.js"],"names":["Home","className","to","getRandom","max","Math","floor","random","expand","board","add","roots","i","length","j","push","dir","BoardContext","createContext","initialBoard","Array","fill","map","a","initialState","counter","seen","reducer","state","action","type","payload","rowNumber","colNumber","newBoard","slice","newSeen","resetBoard","Space","boardContext","useContext","boardState","onClick","alert","dispatch","Row","arr","Board","Header","JSON","stringify","ReturnHome","App","useReducer","exact","path","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e97f6b0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./home.css\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"home\">\r\n      <h1>Game Site</h1>\r\n      <div>\r\n        <Link to=\"/game/roots\">Underground Roots Game</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","const getRandom = (max) => Math.floor(Math.random() * max);\r\n\r\nexport default getRandom;\r\n","import getRandom from \"./getRandom\";\r\n\r\nconst expand = (board) => {\r\n  const roots = [];\r\n  for (let i = 0; i < board.length; i++) {\r\n    for (let j = 0; j < board[0].length; j++) {\r\n      if (board[i][j]) roots.push([i, j]);\r\n    }\r\n  }\r\n  let add;\r\n  while (true) {\r\n    let [i, j] = roots[getRandom(roots.length)];\r\n    const dir = getRandom(4);\r\n    if (dir === 0) i++;\r\n    else if (dir === 1) j++;\r\n    else if (dir === 2) i--;\r\n    else j--;\r\n    if (\r\n      i > -1 &&\r\n      j > -1 &&\r\n      i < board.length &&\r\n      j < board[0].length &&\r\n      !board[i][j]\r\n    ) {\r\n      add = [i, j];\r\n      break;\r\n    }\r\n  }\r\n  return add;\r\n};\r\n\r\nexport default expand;\r\n","import { createContext } from \"react\";\r\nimport { getRandom } from \"./utils\";\r\n\r\nconst BoardContext = createContext();\r\nconst initialBoard = new Array(8).fill().map((a) => new Array(8).fill(false));\r\ninitialBoard[getRandom(8)][getRandom(8)] = true;\r\nlet counter = 1;\r\nconst initialState = { initialBoard, counter, seen: [] };\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"act\":\r\n      const [rowNumber, colNumber] = action.payload;\r\n      const newBoard = state.initialBoard.slice();\r\n      newBoard[rowNumber][colNumber] = true;\r\n      const newState = {\r\n        ...state,\r\n        counter: state.counter + 1,\r\n        initialBoard: newBoard,\r\n      };\r\n      return newState;\r\n    case \"memory\":\r\n      const newSeen = [...state.seen, action.payload];\r\n      return { ...state, seen: newSeen };\r\n    case \"reset\":\r\n      const resetBoard = new Array(8)\r\n        .fill()\r\n        .map((a) => new Array(8).fill(false));\r\n      resetBoard[getRandom(8)][getRandom(8)] = true;\r\n      return { counter: 1, initialBoard: resetBoard, seen: [] };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { BoardContext, initialState, reducer };\r\n","import { useContext } from \"react\";\r\nimport { BoardContext } from \"../state\";\r\nimport { expand } from \"../utils\";\r\nimport \"./space.css\";\r\n\r\nfunction Space({ rowNumber, colNumber }) {\r\n  const boardContext = useContext(BoardContext);\r\n  const boardState = boardContext.state.initialBoard;\r\n  return (\r\n    <span\r\n      className=\"space\"\r\n      onClick={() => {\r\n        if (!boardState[rowNumber][colNumber]) {\r\n          const add = expand(boardState);\r\n          boardContext.dispatch({\r\n            type: \"memory\",\r\n            payload: [rowNumber, colNumber],\r\n          });\r\n          boardContext.dispatch({\r\n            type: \"act\",\r\n            payload: add,\r\n          });\r\n        } else {\r\n          alert(\"You have found the roots!\");\r\n          boardContext.dispatch({\r\n            type: \"reset\",\r\n          });\r\n        }\r\n      }}\r\n    >\r\n      {`R: ${rowNumber}, C: ${colNumber}`}\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default Space;\r\n","import Space from \"../space\";\r\nimport \"./row.css\";\r\n\r\nfunction Row({ rowNumber }) {\r\n  const arr = new Array(8)\r\n    .fill()\r\n    .map((a, i) => <Space rowNumber={rowNumber} colNumber={i} />);\r\n\r\n  return <div className=\"row\">{arr}</div>;\r\n}\r\n\r\nexport default Row;\r\n","import Row from \"../row\";\r\nimport \"./board.css\";\r\n\r\nfunction Board() {\r\n  const arr = new Array(8).fill().map((a, i) => <Row rowNumber={i} />);\r\n\r\n  return arr;\r\n}\r\n\r\nexport default Board;\r\n","import { useContext } from \"react\";\r\nimport { BoardContext } from \"../state\";\r\nimport \"./header.css\";\r\n\r\nfunction Header() {\r\n  const boardContext = useContext(BoardContext);\r\n  if (boardContext.state.counter === 64) {\r\n    boardContext.dispatch({\r\n      type: \"reset\",\r\n    });\r\n    alert(\"All is below!\");\r\n  }\r\n  return (\r\n    <div className=\"Header\">\r\n      <div>Root Size: {JSON.stringify(boardContext.state.counter)}</div>\r\n      <div>Seen: {JSON.stringify(boardContext.state.seen)}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./returnHome.css\";\r\n\r\nfunction ReturnHome() {\r\n  return (\r\n    <div className=\"returnHome\">\r\n      <Link to=\"/game\">Home</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReturnHome;\r\n","import { useReducer } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./home\";\nimport Board from \"./roots/board\";\nimport Header from \"./roots/header\";\nimport ReturnHome from \"./returnHome\";\nimport { BoardContext, initialState, reducer } from \"./roots/state\";\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/game\">\n          <Home />\n        </Route>\n        <Route path=\"/game/roots\">\n          <BoardContext.Provider value={{ state, dispatch }}>\n            <Header />\n            <Board />\n          </BoardContext.Provider>\n          <ReturnHome />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}